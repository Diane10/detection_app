# -*- coding: utf-8 -*-
"""Detecting Malicious Url With Machine Learning In Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NxHF2h9R3ujhIzWCKoC9snJlBKutBtIG

## Detecting Malicious URL With Machine Learning In Python
##### Credits Faizann
"""

# EDA Packages
import pandas as pd
import numpy as np
import random
import streamlit as st


# Machine Learning Packages
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# Load Url Data 
urls_data = pd.read_csv("urldata.csv")


def makeTokens(f):
    tkns_BySlash = str(f.encode('utf-8')).split('/')	# make tokens after splitting by slash
    total_Tokens = []
    for i in tkns_BySlash:
        tokens = str(i).split('-')	# make tokens after splitting by dash
        tkns_ByDot = []
        for j in range(0,len(tokens)):
            temp_Tokens = str(tokens[j]).split('.')	# make tokens after splitting by dot
            tkns_ByDot = tkns_ByDot + temp_Tokens
        total_Tokens = total_Tokens + tokens + tkns_ByDot
    total_Tokens = list(set(total_Tokens))	#remove redundant tokens
    if 'com' in total_Tokens:
        total_Tokens.remove('com')	#removing .com since it occurs a lot of times and it should not be included in our features
    return total_Tokens


# Features
url_list = urls_data["url"]

# Using Default Tokenizer
#vectorizer = TfidfVectorizer()

# Using Custom Tokenizer
vectorizer = TfidfVectorizer(tokenizer=makeTokens)

# Store vectors into X variable as Our XFeatures
X = vectorizer.fit_transform(url_list)


from sklearn.preprocessing import LabelEncoder

label= LabelEncoder()
urls_data["label"]=label.fit_transform(urls_data["label"])
y = urls_data["label"]




X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model Building
#using logistic regression
logit = LogisticRegression()	
logit.fit(X_train, y_train)

# Accuracy of Our Model
#print("Accuracy ",logit.score(X_test, y_test))


X_predict = ["google.com/search=jcharistech",
"google.com/search=faizanahmad",
"pakistanifacebookforever.com/getpassword.php/", 
"www.radsport-voggel.de/wp-admin/includes/log.exe", 
"ahrenhei.without-transfer.ru/nethost.exe ",
"www.itidea.it/centroesteticosothys/img/_notes/gum.exe"]

X_predict = vectorizer.transform(X_predict)
New_predict = logit.predict(X_predict)

#print(New_predict)

predict=["google.com/search=jcharistech"]
predicts = vectorizer.transform(predict)
New_pred = logit.predict(predicts)
#print(New_pred)

# https://db.aa419.org/fakebankslist.php
X_predict1 = ["www.buyfakebillsonlinee.blogspot.com", 
"www.unitedairlineslogistics.com",
"www.stonehousedelivery.com",
"www.silkroadmeds-onlinepharmacy.com" ]

X_predict1 = vectorizer.transform(X_predict1)
New_predict1 = logit.predict(X_predict1)
#print(New_predict1)

# Using Default Tokenizer
vectorizer = TfidfVectorizer()

# Store vectors into X variable as Our XFeatures
X = vectorizer.fit_transform(url_list)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model Building
logit = LogisticRegression()	#using logistic regression
logit.fit(X_train, y_train)

# Accuracy of Our Model with our Custom Token
#print("Accuracy ",logit.score(X_test, y_test))

st.title("Phishing Detector")
	# st.subheader("ML App with Streamlit")
html_temp = """
	<div style="background-color:blue;padding:10px">
	<h1 style="color:white;text-align:center;">Streamlit ML App </h1>
	</div>
	"""
st.markdown(html_temp,unsafe_allow_html=True)

# Get user input
user_input =st.text_input("Enter URL Here","Type Here")
user_input=[user_input]
user_predict = vectorizer.transform(user_input )
Newuser_predict = logit.predict(user_predict )
#st.write("***User Url: ***:" , Newuser_predict )

if st.button("Predict"):
    if Newuser_predict[0] == 0:
        st.write("Prediction: ***URL IS SAFE!!***")
    elif Newuser_predict[0] == 1:
        st.write("Prediction: ***URL IS NOT SAFE***")